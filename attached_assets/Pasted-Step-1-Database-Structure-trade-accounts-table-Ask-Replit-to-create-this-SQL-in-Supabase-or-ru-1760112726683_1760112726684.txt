Step 1 ‚Äî Database Structure (trade_accounts table)

Ask Replit to create this SQL in Supabase (or run it yourself):

CREATE TABLE IF NOT EXISTS trade_accounts (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES user_profiles(id) ON DELETE CASCADE,
  account_type TEXT CHECK (account_type IN ('demo', 'proprietary', 'live')) NOT NULL,
  market_type TEXT CHECK (market_type IN ('forex', 'futures', 'stocks', 'crypto')) NOT NULL,
  broker_name TEXT NOT NULL,
  account_name TEXT NOT NULL, -- e.g., #12345678 or custom name
  starting_balance NUMERIC(12,2) NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

ALTER TABLE trade_accounts ENABLE ROW LEVEL SECURITY;

CREATE POLICY "User can view own accounts"
ON trade_accounts FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "User can insert own accounts"
ON trade_accounts FOR INSERT WITH CHECK (auth.uid() = user_id);


This lets each logged-in user manage their own accounts safely.

‚öôÔ∏è Step 2 ‚Äî Frontend (Add Account Form)

When user clicks ‚ÄúAdd Trading Account‚Äù, show this modal or form:

Field	Type	Example	Required
Account Type	Dropdown	Demo / Proprietary / Live	‚úÖ
Market Type	Dropdown	Forex / Futures / Stocks / Crypto	‚úÖ
Broker / Prop Name	Text	FTMO, IC Markets, Binance, etc.	‚úÖ
Account Name / Number	Text	#12345678	‚úÖ
Starting Balance	Numeric Input	10,000	‚úÖ

üí° Logic:

If user chooses ‚ÄúProprietary Account,‚Äù show a placeholder like ‚Äúe.g., FTMO, MyForexFunds‚Äù

If ‚ÄúLive Account,‚Äù placeholder ‚Äúe.g., IC Markets, Pepperstone‚Äù

Auto-detect currency symbol if you support multi-currency (optional)

On submit, insert to Supabase ‚Üí trade_accounts

‚öôÔ∏è Step 3 ‚Äî Linking Trades to Accounts

When adding a trade, force the user to select which account it belongs to.

Add account_id UUID REFERENCES trade_accounts(id) to your trades table.

This ensures each trade is always tied to the correct account.

‚öôÔ∏è Step 4 ‚Äî Analytics Behavior

Once the accounts are in place:

Default view: show All Accounts Combined ‚Üí aggregate PnL, win rate, drawdown, etc.

Filter options: dropdown ‚Üí select ‚ÄúAll / Demo / Proprietary / Live / [Specific Name]‚Äù

Example logic:

SELECT * FROM trades WHERE account_id IN (user_selected_accounts)


Supabase can handle these relations natively (via foreign key joins).

‚öôÔ∏è Step 5 ‚Äî Suggested UI Layout

Simple, clean card-based view:

Trading Accounts Page

+----------------------------------+
| FTMO (Proprietary, Forex)        |
| Account #: #124587               |
| Starting Balance: $10,000        |
| Created: Oct 10, 2025            |
| [View Analytics] [Delete]        |
+----------------------------------+

+----------------------------------+
| Binance (Live, Crypto)           |
| Account #: #BX1234               |
| Starting Balance: $2,500         |
| Created: Oct 10, 2025            |
| [View Analytics] [Delete]        |
+----------------------------------+

[ + Add New Account ]

‚öôÔ∏è Step 6 ‚Äî Tell Replit This:

‚ÄúPlease add a new trade_accounts table in Supabase with user_id linkage.
Create an Add Account form in the frontend where the user selects account type (demo, proprietary, live), market type (forex, futures, stocks, crypto), enters broker/prop name, account number/name, and starting balance.
The user cannot add trades unless they have at least one account created.
Each trade must reference the selected account_id.
The analytics dashboard should allow filtering by all accounts combined or individual accounts.‚Äù